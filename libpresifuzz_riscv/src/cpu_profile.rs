
// SPDX-FileCopyrightText: 2022 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

/*
* This file was automatically generated by PreSiFuzz using riscv-opcodes
* Please, do not change this file directly but instead look at presifuzz/riscv-opcodes
* This file contains helper functions to assemble all supported riscv instructions
*/
use libafl::prelude::HasRand;
use crate::instruction::Instruction;
use libafl::prelude::HasMaxSize;
use libafl::prelude::MutationResult;
use libafl_bolts::Named;

use libafl_bolts::{
    rands::Rand,
};

pub fn build_operand(value: u32, lsb: u32, msb: u32) -> u32 {
    let nb_bits = msb-lsb + 1;
    let op_mask = ((1<<(1-1))-1)^((1<<nb_bits)-1);
    return (value & op_mask) << lsb;
}

pub fn random_gp_reg<S>(state: &mut S) -> u32
where
    S: HasRand,
{
    return state.rand_mut().choose(1..32);
}

pub fn random_big_reg<S>(state: &mut S) -> u32
where
    S: HasRand,
{
    return state.rand_mut().choose(1..12);
}

pub const ALL_RISCV_INSTR: &'static [&'static str] = &[
"add","addi","addiw","addw","and","andi","auipc","beq","bge","bgeu",
"blt","bltu","bne","c_add","c_addi","c_addi16sp","c_addi4spn","c_addiw","c_addw","c_and",
"c_andi","c_beqz","c_bnez","c_ebreak","c_j","c_jal","c_jalr","c_jr","c_ld","c_ldsp",
"c_li","c_lui","c_lw","c_lwsp","c_mv","c_nop","c_or","c_sd","c_sdsp","c_slli",
"c_slli_rv32","c_srai","c_srai_rv32","c_srli","c_srli_rv32","c_sub","c_subw","c_sw","c_swsp","c_xor",
"div","divu","divuw","divw","ebreak","ecall","fence","fence_tso","jal","jalr",
"lb","lbu","ld","lh","lhu","lui","lw","lwu","mul","mulh",
"mulhsu","mulhu","mulw","or","ori","pause","rem","remu","remuw","remw",
"sb","sbreak","scall","sd","sh","sll","slli","slli_rv32","slliw","sllw",
"slt","slti","sltiu","sltu","sra","srai","srai_rv32","sraiw","sraw","srl",
"srli","srli_rv32","srliw","srlw","sub","subw","sw","xor","xori",];

/* Start of the helper function section */
pub fn add(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x33;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x33,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("add"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn addi(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x13;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x13,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("addi"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn addiw(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1b,
        mmatch: 0x707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("addiw"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn addw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x3b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x3b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("addw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn and(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x7033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x7033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("and"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn andi(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x7013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x7013,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("andi"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn auipc(rd: u32,imm20: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x17;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(imm20, 12, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x17,
        mmatch: 0x7f,
        extension: String::from("rv_i"),
        mnemonic: String::from("auipc"),
        operands: vec![(7,11), (12,31), ],
    };
}
pub fn beq(bimm12hi: u32,rs1: u32,rs2: u32,bimm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x63;
    inst |= mask;
    inst |= build_operand(bimm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(bimm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x63,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("beq"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn bge(bimm12hi: u32,rs1: u32,rs2: u32,bimm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x5063;
    inst |= mask;
    inst |= build_operand(bimm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(bimm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x5063,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("bge"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn bgeu(bimm12hi: u32,rs1: u32,rs2: u32,bimm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x7063;
    inst |= mask;
    inst |= build_operand(bimm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(bimm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x7063,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("bgeu"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn blt(bimm12hi: u32,rs1: u32,rs2: u32,bimm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4063;
    inst |= mask;
    inst |= build_operand(bimm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(bimm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4063,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("blt"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn bltu(bimm12hi: u32,rs1: u32,rs2: u32,bimm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6063;
    inst |= mask;
    inst |= build_operand(bimm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(bimm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x6063,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("bltu"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn bne(bimm12hi: u32,rs1: u32,rs2: u32,bimm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1063;
    inst |= mask;
    inst |= build_operand(bimm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(bimm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1063,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("bne"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn c_add(rd_rs1_n0: u32,c_rs2_n0: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x9002;
    inst |= mask;
    inst |= build_operand(rd_rs1_n0, 7, 11);
    inst |= build_operand(c_rs2_n0, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x9002,
        mmatch: 0xf003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_add"),
        operands: vec![(7,11), (2,6), ],
    };
}
pub fn c_addi(rd_rs1_n0: u32,c_nzimm6lo: u32,c_nzimm6hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1;
    inst |= mask;
    inst |= build_operand(rd_rs1_n0, 7, 11);
    inst |= build_operand(c_nzimm6lo, 2, 6);
    inst |= build_operand(c_nzimm6hi, 12, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x1,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_addi"),
        operands: vec![(7,11), (2,6), (12,12), ],
    };
}
pub fn c_addi16sp(c_nzimm10hi: u32,c_nzimm10lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6101;
    inst |= mask;
    inst |= build_operand(c_nzimm10hi, 12, 12);
    inst |= build_operand(c_nzimm10lo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x6101,
        mmatch: 0xef83,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_addi16sp"),
        operands: vec![(12,12), (2,6), ],
    };
}
pub fn c_addi4spn(rd_p: u32,c_nzuimm10: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x0;
    inst |= mask;
    inst |= build_operand(rd_p, 2, 4);
    inst |= build_operand(c_nzuimm10, 5, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x0,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_addi4spn"),
        operands: vec![(2,4), (5,12), ],
    };
}
pub fn c_addiw(rd_rs1_n0: u32,c_imm6lo: u32,c_imm6hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2001;
    inst |= mask;
    inst |= build_operand(rd_rs1_n0, 7, 11);
    inst |= build_operand(c_imm6lo, 2, 6);
    inst |= build_operand(c_imm6hi, 12, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x2001,
        mmatch: 0xe003,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_addiw"),
        operands: vec![(7,11), (2,6), (12,12), ],
    };
}
pub fn c_addw(rd_rs1_p: u32,rs2_p: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x9c21;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x9c21,
        mmatch: 0xfc63,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_addw"),
        operands: vec![(7,9), (2,4), ],
    };
}
pub fn c_and(rd_rs1_p: u32,rs2_p: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8c61;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8c61,
        mmatch: 0xfc63,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_and"),
        operands: vec![(7,9), (2,4), ],
    };
}
pub fn c_andi(rd_rs1_p: u32,c_imm6hi: u32,c_imm6lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8801;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(c_imm6hi, 12, 12);
    inst |= build_operand(c_imm6lo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8801,
        mmatch: 0xec03,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_andi"),
        operands: vec![(7,9), (12,12), (2,6), ],
    };
}
pub fn c_beqz(rs1_p: u32,c_bimm9lo: u32,c_bimm9hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xc001;
    inst |= mask;
    inst |= build_operand(rs1_p, 7, 9);
    inst |= build_operand(c_bimm9lo, 2, 6);
    inst |= build_operand(c_bimm9hi, 10, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xc001,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_beqz"),
        operands: vec![(7,9), (2,6), (10,12), ],
    };
}
pub fn c_bnez(rs1_p: u32,c_bimm9lo: u32,c_bimm9hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xe001;
    inst |= mask;
    inst |= build_operand(rs1_p, 7, 9);
    inst |= build_operand(c_bimm9lo, 2, 6);
    inst |= build_operand(c_bimm9hi, 10, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xe001,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_bnez"),
        operands: vec![(7,9), (2,6), (10,12), ],
    };
}
pub fn c_ebreak() -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x9002;
    inst |= mask;

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x9002,
        mmatch: 0xffff,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_ebreak"),
        operands: vec![],
    };
}
pub fn c_j(c_imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xa001;
    inst |= mask;
    inst |= build_operand(c_imm12, 2, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xa001,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_j"),
        operands: vec![(2,12), ],
    };
}
pub fn c_jal(c_imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2001;
    inst |= mask;
    inst |= build_operand(c_imm12, 2, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x2001,
        mmatch: 0xe003,
        extension: String::from("rv32_c"),
        mnemonic: String::from("c_jal"),
        operands: vec![(2,12), ],
    };
}
pub fn c_jalr(c_rs1_n0: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x9002;
    inst |= mask;
    inst |= build_operand(c_rs1_n0, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x9002,
        mmatch: 0xf07f,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_jalr"),
        operands: vec![(7,11), ],
    };
}
pub fn c_jr(rs1_n0: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8002;
    inst |= mask;
    inst |= build_operand(rs1_n0, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8002,
        mmatch: 0xf07f,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_jr"),
        operands: vec![(7,11), ],
    };
}
pub fn c_ld(rd_p: u32,rs1_p: u32,c_uimm8lo: u32,c_uimm8hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6000;
    inst |= mask;
    inst |= build_operand(rd_p, 2, 4);
    inst |= build_operand(rs1_p, 7, 9);
    inst |= build_operand(c_uimm8lo, 5, 6);
    inst |= build_operand(c_uimm8hi, 10, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x6000,
        mmatch: 0xe003,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_ld"),
        operands: vec![(2,4), (7,9), (5,6), (10,12), ],
    };
}
pub fn c_ldsp(rd_n0: u32,c_uimm9sphi: u32,c_uimm9splo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6002;
    inst |= mask;
    inst |= build_operand(rd_n0, 7, 11);
    inst |= build_operand(c_uimm9sphi, 12, 12);
    inst |= build_operand(c_uimm9splo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x6002,
        mmatch: 0xe003,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_ldsp"),
        operands: vec![(7,11), (12,12), (2,6), ],
    };
}
pub fn c_li(rd_n0: u32,c_imm6lo: u32,c_imm6hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4001;
    inst |= mask;
    inst |= build_operand(rd_n0, 7, 11);
    inst |= build_operand(c_imm6lo, 2, 6);
    inst |= build_operand(c_imm6hi, 12, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x4001,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_li"),
        operands: vec![(7,11), (2,6), (12,12), ],
    };
}
pub fn c_lui(rd_n2: u32,c_nzimm18hi: u32,c_nzimm18lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6001;
    inst |= mask;
    inst |= build_operand(rd_n2, 7, 11);
    inst |= build_operand(c_nzimm18hi, 12, 12);
    inst |= build_operand(c_nzimm18lo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x6001,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_lui"),
        operands: vec![(7,11), (12,12), (2,6), ],
    };
}
pub fn c_lw(rd_p: u32,rs1_p: u32,c_uimm7lo: u32,c_uimm7hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4000;
    inst |= mask;
    inst |= build_operand(rd_p, 2, 4);
    inst |= build_operand(rs1_p, 7, 9);
    inst |= build_operand(c_uimm7lo, 5, 6);
    inst |= build_operand(c_uimm7hi, 10, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x4000,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_lw"),
        operands: vec![(2,4), (7,9), (5,6), (10,12), ],
    };
}
pub fn c_lwsp(rd_n0: u32,c_uimm8sphi: u32,c_uimm8splo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4002;
    inst |= mask;
    inst |= build_operand(rd_n0, 7, 11);
    inst |= build_operand(c_uimm8sphi, 12, 12);
    inst |= build_operand(c_uimm8splo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x4002,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_lwsp"),
        operands: vec![(7,11), (12,12), (2,6), ],
    };
}
pub fn c_mv(rd_n0: u32,c_rs2_n0: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8002;
    inst |= mask;
    inst |= build_operand(rd_n0, 7, 11);
    inst |= build_operand(c_rs2_n0, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8002,
        mmatch: 0xf003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_mv"),
        operands: vec![(7,11), (2,6), ],
    };
}
pub fn c_nop(c_nzimm6hi: u32,c_nzimm6lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1;
    inst |= mask;
    inst |= build_operand(c_nzimm6hi, 12, 12);
    inst |= build_operand(c_nzimm6lo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x1,
        mmatch: 0xef83,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_nop"),
        operands: vec![(12,12), (2,6), ],
    };
}
pub fn c_or(rd_rs1_p: u32,rs2_p: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8c41;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8c41,
        mmatch: 0xfc63,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_or"),
        operands: vec![(7,9), (2,4), ],
    };
}
pub fn c_sd(rs1_p: u32,rs2_p: u32,c_uimm8hi: u32,c_uimm8lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xe000;
    inst |= mask;
    inst |= build_operand(rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);
    inst |= build_operand(c_uimm8hi, 10, 12);
    inst |= build_operand(c_uimm8lo, 5, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xe000,
        mmatch: 0xe003,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_sd"),
        operands: vec![(7,9), (2,4), (10,12), (5,6), ],
    };
}
pub fn c_sdsp(c_rs2: u32,c_uimm9sp_s: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xe002;
    inst |= mask;
    inst |= build_operand(c_rs2, 2, 6);
    inst |= build_operand(c_uimm9sp_s, 7, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xe002,
        mmatch: 0xe003,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_sdsp"),
        operands: vec![(2,6), (7,12), ],
    };
}
pub fn c_slli(rd_rs1_n0: u32,c_nzuimm6hi: u32,c_nzuimm6lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2;
    inst |= mask;
    inst |= build_operand(rd_rs1_n0, 7, 11);
    inst |= build_operand(c_nzuimm6hi, 12, 12);
    inst |= build_operand(c_nzuimm6lo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x2,
        mmatch: 0xe003,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_slli"),
        operands: vec![(7,11), (12,12), (2,6), ],
    };
}
pub fn c_slli_rv32(rd_rs1_n0: u32,c_nzuimm6lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2;
    inst |= mask;
    inst |= build_operand(rd_rs1_n0, 7, 11);
    inst |= build_operand(c_nzuimm6lo, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x2,
        mmatch: 0xf003,
        extension: String::from("rv32_c"),
        mnemonic: String::from("c_slli_rv32"),
        operands: vec![(7,11), (2,6), ],
    };
}
pub fn c_srai(rd_rs1_p: u32,c_nzuimm6lo: u32,c_nzuimm6hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8401;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(c_nzuimm6lo, 2, 6);
    inst |= build_operand(c_nzuimm6hi, 12, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8401,
        mmatch: 0xec03,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_srai"),
        operands: vec![(7,9), (2,6), (12,12), ],
    };
}
pub fn c_srai_rv32(rd_rs1_p: u32,c_nzuimm5: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8401;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(c_nzuimm5, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8401,
        mmatch: 0xfc03,
        extension: String::from("rv32_c"),
        mnemonic: String::from("c_srai_rv32"),
        operands: vec![(7,9), (2,6), ],
    };
}
pub fn c_srli(rd_rs1_p: u32,c_nzuimm6lo: u32,c_nzuimm6hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8001;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(c_nzuimm6lo, 2, 6);
    inst |= build_operand(c_nzuimm6hi, 12, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8001,
        mmatch: 0xec03,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_srli"),
        operands: vec![(7,9), (2,6), (12,12), ],
    };
}
pub fn c_srli_rv32(rd_rs1_p: u32,c_nzuimm5: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8001;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(c_nzuimm5, 2, 6);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8001,
        mmatch: 0xfc03,
        extension: String::from("rv32_c"),
        mnemonic: String::from("c_srli_rv32"),
        operands: vec![(7,9), (2,6), ],
    };
}
pub fn c_sub(rd_rs1_p: u32,rs2_p: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8c01;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8c01,
        mmatch: 0xfc63,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_sub"),
        operands: vec![(7,9), (2,4), ],
    };
}
pub fn c_subw(rd_rs1_p: u32,rs2_p: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x9c01;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x9c01,
        mmatch: 0xfc63,
        extension: String::from("rv64_c"),
        mnemonic: String::from("c_subw"),
        operands: vec![(7,9), (2,4), ],
    };
}
pub fn c_sw(rs1_p: u32,rs2_p: u32,c_uimm7lo: u32,c_uimm7hi: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xc000;
    inst |= mask;
    inst |= build_operand(rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);
    inst |= build_operand(c_uimm7lo, 5, 6);
    inst |= build_operand(c_uimm7hi, 10, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xc000,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_sw"),
        operands: vec![(7,9), (2,4), (5,6), (10,12), ],
    };
}
pub fn c_swsp(c_rs2: u32,c_uimm8sp_s: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xc002;
    inst |= mask;
    inst |= build_operand(c_rs2, 2, 6);
    inst |= build_operand(c_uimm8sp_s, 7, 12);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0xc002,
        mmatch: 0xe003,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_swsp"),
        operands: vec![(2,6), (7,12), ],
    };
}
pub fn c_xor(rd_rs1_p: u32,rs2_p: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8c21;
    inst |= mask;
    inst |= build_operand(rd_rs1_p, 7, 9);
    inst |= build_operand(rs2_p, 2, 4);

    return Instruction{
        instruction: inst as u64,
        length: 2,
        mask: 0x8c21,
        mmatch: 0xfc63,
        extension: String::from("rv_c"),
        mnemonic: String::from("c_xor"),
        operands: vec![(7,9), (2,4), ],
    };
}
pub fn div(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2004033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2004033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("div"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn divu(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2005033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2005033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("divu"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn divuw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x200503b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x200503b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_m"),
        mnemonic: String::from("divuw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn divw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x200403b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x200403b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_m"),
        mnemonic: String::from("divw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn ebreak() -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x100073;
    inst |= mask;

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x100073,
        mmatch: 0xffffffff,
        extension: String::from("rv_i"),
        mnemonic: String::from("ebreak"),
        operands: vec![],
    };
}
pub fn ecall() -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x73;
    inst |= mask;

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x73,
        mmatch: 0xffffffff,
        extension: String::from("rv_i"),
        mnemonic: String::from("ecall"),
        operands: vec![],
    };
}
pub fn fence(fm: u32,pred: u32,succ: u32,rs1: u32,rd: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0xf;
    inst |= mask;
    inst |= build_operand(fm, 28, 31);
    inst |= build_operand(pred, 24, 27);
    inst |= build_operand(succ, 20, 23);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rd, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0xf,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("fence"),
        operands: vec![(28,31), (24,27), (20,23), (15,19), (7,11), ],
    };
}
pub fn fence_tso(rs1: u32,rd: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x8330000f;
    inst |= mask;
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rd, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x8330000f,
        mmatch: 0xfff0707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("fence_tso"),
        operands: vec![(15,19), (7,11), ],
    };
}
pub fn jal(rd: u32,jimm20: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6f;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(jimm20, 12, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x6f,
        mmatch: 0x7f,
        extension: String::from("rv_i"),
        mnemonic: String::from("jal"),
        operands: vec![(7,11), (12,31), ],
    };
}
pub fn jalr(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x67;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x67,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("jalr"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn lb(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x3;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x3,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("lb"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn lbu(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4003;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4003,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("lbu"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn ld(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x3003;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x3003,
        mmatch: 0x707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("ld"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn lh(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1003;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1003,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("lh"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn lhu(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x5003;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x5003,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("lhu"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn lui(rd: u32,imm20: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x37;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(imm20, 12, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x37,
        mmatch: 0x7f,
        extension: String::from("rv_i"),
        mnemonic: String::from("lui"),
        operands: vec![(7,11), (12,31), ],
    };
}
pub fn lw(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2003;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2003,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("lw"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn lwu(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6003;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x6003,
        mmatch: 0x707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("lwu"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn mul(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2000033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2000033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("mul"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn mulh(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2001033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2001033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("mulh"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn mulhsu(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2002033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2002033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("mulhsu"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn mulhu(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2003033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2003033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("mulhu"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn mulw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x200003b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x200003b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_m"),
        mnemonic: String::from("mulw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn or(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x6033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("or"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn ori(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x6013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x6013,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("ori"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn pause() -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x100000f;
    inst |= mask;

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x100000f,
        mmatch: 0xffffffff,
        extension: String::from("rv_i"),
        mnemonic: String::from("pause"),
        operands: vec![],
    };
}
pub fn rem(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2006033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2006033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("rem"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn remu(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2007033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2007033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_m"),
        mnemonic: String::from("remu"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn remuw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x200703b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x200703b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_m"),
        mnemonic: String::from("remuw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn remw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x200603b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x200603b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_m"),
        mnemonic: String::from("remw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sb(imm12hi: u32,rs1: u32,rs2: u32,imm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x23;
    inst |= mask;
    inst |= build_operand(imm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(imm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x23,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sb"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn sbreak() -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x100073;
    inst |= mask;

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x100073,
        mmatch: 0xffffffff,
        extension: String::from("rv_i"),
        mnemonic: String::from("sbreak"),
        operands: vec![],
    };
}
pub fn scall() -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x73;
    inst |= mask;

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x73,
        mmatch: 0xffffffff,
        extension: String::from("rv_i"),
        mnemonic: String::from("scall"),
        operands: vec![],
    };
}
pub fn sd(imm12hi: u32,rs1: u32,rs2: u32,imm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x3023;
    inst |= mask;
    inst |= build_operand(imm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(imm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x3023,
        mmatch: 0x707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("sd"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn sh(imm12hi: u32,rs1: u32,rs2: u32,imm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1023;
    inst |= mask;
    inst |= build_operand(imm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(imm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1023,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sh"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn sll(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sll"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn slli(rd: u32,rs1: u32,shamtd: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtd, 20, 25);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1013,
        mmatch: 0xfc00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("slli"),
        operands: vec![(7,11), (15,19), (20,25), ],
    };
}
pub fn slli_rv32(rd: u32,rs1: u32,shamtw: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x1013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtw, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x1013,
        mmatch: 0xfe00707f,
        extension: String::from("rv32_i"),
        mnemonic: String::from("slli_rv32"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn slliw(rd: u32,rs1: u32,shamtw: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x101b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtw, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x101b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("slliw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sllw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x103b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x103b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("sllw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn slt(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("slt"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn slti(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2013,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("slti"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn sltiu(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x3013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x3013,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sltiu"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}
pub fn sltu(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x3033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x3033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sltu"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sra(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x40005033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x40005033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sra"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn srai(rd: u32,rs1: u32,shamtd: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x40005013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtd, 20, 25);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x40005013,
        mmatch: 0xfc00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("srai"),
        operands: vec![(7,11), (15,19), (20,25), ],
    };
}
pub fn srai_rv32(rd: u32,rs1: u32,shamtw: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x40005013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtw, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x40005013,
        mmatch: 0xfe00707f,
        extension: String::from("rv32_i"),
        mnemonic: String::from("srai_rv32"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sraiw(rd: u32,rs1: u32,shamtw: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4000501b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtw, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4000501b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("sraiw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sraw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4000503b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4000503b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("sraw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn srl(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x5033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x5033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("srl"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn srli(rd: u32,rs1: u32,shamtd: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x5013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtd, 20, 25);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x5013,
        mmatch: 0xfc00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("srli"),
        operands: vec![(7,11), (15,19), (20,25), ],
    };
}
pub fn srli_rv32(rd: u32,rs1: u32,shamtw: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x5013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtw, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x5013,
        mmatch: 0xfe00707f,
        extension: String::from("rv32_i"),
        mnemonic: String::from("srli_rv32"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn srliw(rd: u32,rs1: u32,shamtw: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x501b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(shamtw, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x501b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("srliw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn srlw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x503b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x503b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("srlw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sub(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x40000033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x40000033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sub"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn subw(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4000003b;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4000003b,
        mmatch: 0xfe00707f,
        extension: String::from("rv64_i"),
        mnemonic: String::from("subw"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn sw(imm12hi: u32,rs1: u32,rs2: u32,imm12lo: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x2023;
    inst |= mask;
    inst |= build_operand(imm12hi, 25, 31);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);
    inst |= build_operand(imm12lo, 7, 11);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x2023,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("sw"),
        operands: vec![(25,31), (15,19), (20,24), (7,11), ],
    };
}
pub fn xor(rd: u32,rs1: u32,rs2: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4033;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(rs2, 20, 24);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4033,
        mmatch: 0xfe00707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("xor"),
        operands: vec![(7,11), (15,19), (20,24), ],
    };
}
pub fn xori(rd: u32,rs1: u32,imm12: u32) -> Instruction
{
    let mut inst : u32 = 0;
    let mask: u32 = 0x4013;
    inst |= mask;
    inst |= build_operand(rd, 7, 11);
    inst |= build_operand(rs1, 15, 19);
    inst |= build_operand(imm12, 20, 31);

    return Instruction{
        instruction: inst as u64,
        length: 4,
        mask: 0x4013,
        mmatch: 0x707f,
        extension: String::from("rv_i"),
        mnemonic: String::from("xori"),
        operands: vec![(7,11), (15,19), (20,31), ],
    };
}

use lazy_static::lazy_static;
lazy_static! {
// Global Vec to hold instructions
pub static ref INSTRUCTIONS: Vec<Instruction> = {
    vec![
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x33,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("ADD"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x13,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("ADDI"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1b,
            mmatch: 0x707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("ADDIW"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x3b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("ADDW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x7033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("AND"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x7013,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("ANDI"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x17,
            mmatch: 0x7f,
            extension: String::from("rv_i"),
            mnemonic: String::from("AUIPC"),
            operands: vec![(7,11), (12,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x63,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("BEQ"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x5063,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("BGE"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x7063,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("BGEU"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4063,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("BLT"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x6063,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("BLTU"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1063,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("BNE"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x9002,
            mmatch: 0xf003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_ADD"),
            operands: vec![(7,11), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x1,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_ADDI"),
            operands: vec![(7,11), (2,6), (12,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x6101,
            mmatch: 0xef83,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_ADDI16SP"),
            operands: vec![(12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x0,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_ADDI4SPN"),
            operands: vec![(2,4), (5,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x2001,
            mmatch: 0xe003,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_ADDIW"),
            operands: vec![(7,11), (2,6), (12,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x9c21,
            mmatch: 0xfc63,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_ADDW"),
            operands: vec![(7,9), (2,4), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8c61,
            mmatch: 0xfc63,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_AND"),
            operands: vec![(7,9), (2,4), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8801,
            mmatch: 0xec03,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_ANDI"),
            operands: vec![(7,9), (12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xc001,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_BEQZ"),
            operands: vec![(7,9), (2,6), (10,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xe001,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_BNEZ"),
            operands: vec![(7,9), (2,6), (10,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x9002,
            mmatch: 0xffff,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_EBREAK"),
            operands: vec![],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xa001,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_J"),
            operands: vec![(2,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x2001,
            mmatch: 0xe003,
            extension: String::from("rv32_c"),
            mnemonic: String::from("C_JAL"),
            operands: vec![(2,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x9002,
            mmatch: 0xf07f,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_JALR"),
            operands: vec![(7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8002,
            mmatch: 0xf07f,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_JR"),
            operands: vec![(7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x6000,
            mmatch: 0xe003,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_LD"),
            operands: vec![(2,4), (7,9), (5,6), (10,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x6002,
            mmatch: 0xe003,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_LDSP"),
            operands: vec![(7,11), (12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x4001,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_LI"),
            operands: vec![(7,11), (2,6), (12,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x6001,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_LUI"),
            operands: vec![(7,11), (12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x4000,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_LW"),
            operands: vec![(2,4), (7,9), (5,6), (10,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x4002,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_LWSP"),
            operands: vec![(7,11), (12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8002,
            mmatch: 0xf003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_MV"),
            operands: vec![(7,11), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x1,
            mmatch: 0xef83,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_NOP"),
            operands: vec![(12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8c41,
            mmatch: 0xfc63,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_OR"),
            operands: vec![(7,9), (2,4), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xe000,
            mmatch: 0xe003,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_SD"),
            operands: vec![(7,9), (2,4), (10,12), (5,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xe002,
            mmatch: 0xe003,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_SDSP"),
            operands: vec![(2,6), (7,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x2,
            mmatch: 0xe003,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_SLLI"),
            operands: vec![(7,11), (12,12), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x2,
            mmatch: 0xf003,
            extension: String::from("rv32_c"),
            mnemonic: String::from("C_SLLI_RV32"),
            operands: vec![(7,11), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8401,
            mmatch: 0xec03,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_SRAI"),
            operands: vec![(7,9), (2,6), (12,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8401,
            mmatch: 0xfc03,
            extension: String::from("rv32_c"),
            mnemonic: String::from("C_SRAI_RV32"),
            operands: vec![(7,9), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8001,
            mmatch: 0xec03,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_SRLI"),
            operands: vec![(7,9), (2,6), (12,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8001,
            mmatch: 0xfc03,
            extension: String::from("rv32_c"),
            mnemonic: String::from("C_SRLI_RV32"),
            operands: vec![(7,9), (2,6), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8c01,
            mmatch: 0xfc63,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_SUB"),
            operands: vec![(7,9), (2,4), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x9c01,
            mmatch: 0xfc63,
            extension: String::from("rv64_c"),
            mnemonic: String::from("C_SUBW"),
            operands: vec![(7,9), (2,4), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xc000,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_SW"),
            operands: vec![(7,9), (2,4), (5,6), (10,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0xc002,
            mmatch: 0xe003,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_SWSP"),
            operands: vec![(2,6), (7,12), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 2,
            mask: 0x8c21,
            mmatch: 0xfc63,
            extension: String::from("rv_c"),
            mnemonic: String::from("C_XOR"),
            operands: vec![(7,9), (2,4), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2004033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("DIV"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2005033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("DIVU"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x200503b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_m"),
            mnemonic: String::from("DIVUW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x200403b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_m"),
            mnemonic: String::from("DIVW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x100073,
            mmatch: 0xffffffff,
            extension: String::from("rv_i"),
            mnemonic: String::from("EBREAK"),
            operands: vec![],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x73,
            mmatch: 0xffffffff,
            extension: String::from("rv_i"),
            mnemonic: String::from("ECALL"),
            operands: vec![],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0xf,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("FENCE"),
            operands: vec![(28,31), (24,27), (20,23), (15,19), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x8330000f,
            mmatch: 0xfff0707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("FENCE_TSO"),
            operands: vec![(15,19), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x6f,
            mmatch: 0x7f,
            extension: String::from("rv_i"),
            mnemonic: String::from("JAL"),
            operands: vec![(7,11), (12,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x67,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("JALR"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x3,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("LB"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4003,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("LBU"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x3003,
            mmatch: 0x707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("LD"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1003,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("LH"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x5003,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("LHU"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x37,
            mmatch: 0x7f,
            extension: String::from("rv_i"),
            mnemonic: String::from("LUI"),
            operands: vec![(7,11), (12,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2003,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("LW"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x6003,
            mmatch: 0x707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("LWU"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2000033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("MUL"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2001033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("MULH"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2002033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("MULHSU"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2003033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("MULHU"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x200003b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_m"),
            mnemonic: String::from("MULW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x6033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("OR"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x6013,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("ORI"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x100000f,
            mmatch: 0xffffffff,
            extension: String::from("rv_i"),
            mnemonic: String::from("PAUSE"),
            operands: vec![],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2006033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("REM"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2007033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_m"),
            mnemonic: String::from("REMU"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x200703b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_m"),
            mnemonic: String::from("REMUW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x200603b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_m"),
            mnemonic: String::from("REMW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x23,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SB"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x100073,
            mmatch: 0xffffffff,
            extension: String::from("rv_i"),
            mnemonic: String::from("SBREAK"),
            operands: vec![],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x73,
            mmatch: 0xffffffff,
            extension: String::from("rv_i"),
            mnemonic: String::from("SCALL"),
            operands: vec![],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x3023,
            mmatch: 0x707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SD"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1023,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SH"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SLL"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1013,
            mmatch: 0xfc00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SLLI"),
            operands: vec![(7,11), (15,19), (20,25), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x1013,
            mmatch: 0xfe00707f,
            extension: String::from("rv32_i"),
            mnemonic: String::from("SLLI_RV32"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x101b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SLLIW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x103b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SLLW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SLT"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2013,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SLTI"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x3013,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SLTIU"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x3033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SLTU"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x40005033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SRA"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x40005013,
            mmatch: 0xfc00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SRAI"),
            operands: vec![(7,11), (15,19), (20,25), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x40005013,
            mmatch: 0xfe00707f,
            extension: String::from("rv32_i"),
            mnemonic: String::from("SRAI_RV32"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4000501b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SRAIW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4000503b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SRAW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x5033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SRL"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x5013,
            mmatch: 0xfc00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SRLI"),
            operands: vec![(7,11), (15,19), (20,25), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x5013,
            mmatch: 0xfe00707f,
            extension: String::from("rv32_i"),
            mnemonic: String::from("SRLI_RV32"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x501b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SRLIW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x503b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SRLW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x40000033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SUB"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4000003b,
            mmatch: 0xfe00707f,
            extension: String::from("rv64_i"),
            mnemonic: String::from("SUBW"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x2023,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("SW"),
            operands: vec![(25,31), (15,19), (20,24), (7,11), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4033,
            mmatch: 0xfe00707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("XOR"),
            operands: vec![(7,11), (15,19), (20,24), ],
        },
        Instruction {
            instruction: 0 as u64,
            length: 4,
            mask: 0x4013,
            mmatch: 0x707f,
            extension: String::from("rv_i"),
            mnemonic: String::from("XORI"),
            operands: vec![(7,11), (15,19), (20,31), ],
        },
        ]
    };
}

    
