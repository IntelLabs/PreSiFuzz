name: rust-clippy analyze
permissions: read-all
on:
  push:
    branches:
      - main
      - 'bugfix/**'
      - 'feature/**'
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - edited
      - synchronize
    branches:
      - main
  #schedule:
  #  - cron: '5 * * * *'
jobs:
  rust-clippy-analyze:
    name: Run rust-clippy analyzing
    env:
      PRESIFUZZ_DUMMY: 1
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Install Python and pip
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'
          packages: fusesoc
      - name: Install Fusesoc
        run: pip3 install fusesoc
      - name: Checkout code
        uses: actions/checkout@v4.1.5
        with:
          submodules: 'recursive'
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          components: clippy
      - name: rust-cargo for presifuzz libraries
        uses: actions-rs/cargo@v1.0.1
        with:
          toolchain: stable
          components: clippy
          command: build
      - name: rust-cargo for secworks-vcs
        uses: actions-rs/cargo@v1.0.1
        with:
          toolchain: stable
          components: clippy
          command: build
          args: --manifest-path fuzzers/secworks-vcs/Cargo.toml
      - name: Install required packages clippy-sarif sarif-fmt
        run: cargo install clippy-sarif sarif-fmt
      - name: Run rust-clippy with test profile and all features enabled
        run: cargo clippy --all-features --profile=test --message-format=json | clippy-sarif | tee
          rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
      - name: Install cargo2crtf
        run: cargo install cargo2crtf
      - name: Run tests with CRTF output
        run: crtfcargo test --output-format=crtf --output-file=tests.crtf.json
